{"ast":null,"code":"import { apiCall } from './api/api';\nimport { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text\n});\nexport const requestRobots = () => dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  apiCall('https://jsonplaceholder.typicode.com/users').then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/Users/gisetavares/Documents/Meus_Estudos/Udemy-CompleteJuniorToSeniorWebDevelopment/Robofriends/robofriends-pwa/src/actions.js"],"names":["apiCall","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","then","data","catch","error"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AACA,SACEC,kBADF,EAEEC,sBAFF,EAGEC,sBAHF,EAIEC,qBAJF,QAKQ,aALR;AAOA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AAAEC,EAAAA,IAAI,EAAEN,kBAAR;AAA4BO,EAAAA,OAAO,EAAEF;AAArC,CAAX,CAAvB;AAEP,OAAO,MAAMG,aAAa,GAAG,MAAOC,QAAD,IAAc;AAC/CA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AACAF,EAAAA,OAAO,CAAC,4CAAD,CAAP,CACGW,IADH,CACQC,IAAI,IAAIF,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,sBAAR;AAAgCK,IAAAA,OAAO,EAAEI;AAAzC,GAAD,CADxB,EAEGC,KAFH,CAESC,KAAK,IAAIJ,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEH,qBAAR;AAA+BI,IAAAA,OAAO,EAAEM;AAAxC,GAAD,CAF1B;AAGD,CALM","sourcesContent":["import { apiCall } from './api/api'\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}"]},"metadata":{},"sourceType":"module"}